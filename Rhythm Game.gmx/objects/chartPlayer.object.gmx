<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_cursor(cr_none);

input = 0;

p = true;

pinkX = 0;
blueX = 0;

b1 = 1;
b2 = 2;
b3 = 4;
b4 = 8;

chart = ds_list_create();
lasers = ds_list_create();

ds_list_add(chart, b1);
ds_list_add(chart, b1 + b2);
ds_list_add(chart, b3 + b4);
ds_list_add(chart, b1 + b4);

ds_list_add(chart, b3);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b4);

ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, 0);

ds_list_add(chart, b1);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b2);

ds_list_add(chart, 0);
ds_list_add(chart, 0);

ds_list_add(chart, b1 + b4);
ds_list_add(chart, 0);
ds_list_add(chart, 0);
ds_list_add(chart, b1 + b4);

ds_list_add(chart, 0);
ds_list_add(chart, 0);

ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b1);
ds_list_add(chart, b2);

ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b1);
ds_list_add(chart, b2);
ds_list_add(chart, b4);
ds_list_add(chart, b3);
ds_list_add(chart, b1);
ds_list_add(chart, b2);

ds_list_add(chart, b1 + b4);
ds_list_add(chart, b1 + b4);
ds_list_add(chart, b1 + b4);
ds_list_add(chart, b1 + b4);

//start X pos + (end X pos &lt;&lt; 10) + (time &lt;&lt; 20)
ds_list_add(lasers, 0);
ds_list_add(lasers, 0);
ds_list_add(lasers, 0);
ds_list_add(lasers, 0);
ds_list_add(lasers, 0 + (360 &lt;&lt; 10) + (8 &lt;&lt; 20));

ds_list_add(lasers, 720 + (0 &lt;&lt; 10) + (2 &lt;&lt; 20));
ds_list_add(lasers, 0 + (720 &lt;&lt; 10) + (2 &lt;&lt; 20));
ds_list_add(lasers, 0 + (720 &lt;&lt; 10) + (2 &lt;&lt; 20));

timer = 0;
lTimer = -1;
delay = 30;
delayTimer = 0;
hp = 10;
win = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input = 0;

pinkX = 720 - (display_mouse_get_x()/display_get_width()) * 720;
blueX = (display_mouse_get_y()/display_get_height()) * 720;

if(keyboard_check(ord('D'))){
  input += 1;
}
if(keyboard_check(ord('F'))){
  input += 2;
}
if(keyboard_check(ord('J'))){
  input += 4;
}
if(keyboard_check(ord('K'))){
  input += 8;
}

if(hp&gt;0){
  delayTimer++;
  if(delayTimer == floor(delay)){
    timer++;
    delayTimer = 0;
    if(timer &lt; ds_list_size(chart)){
      if(chart[|timer] != 0){
        b=instance_create(0,0,note);
        b.buttons = chart[|timer];
      }
      if(!instance_exists(laser))
        lTimer++;
      if(!instance_exists(laser) &amp;&amp; lTimer &lt; ds_list_size(lasers) &amp;&amp; lasers[|lTimer] != 0){
        b = instance_create(0,0,laser);
        b.pink = p;
        p = !p;
        for(i=0;i&lt;8;i++){
          b.xPos[i] = ( ((lasers[|lTimer] &gt;&gt; 10) &amp; 1023) - (lasers[|lTimer] &amp; 1023) ) / 7 * i + (lasers[|lTimer] &amp; 1023);
          b.yPos[i] = -(((lasers[|lTimer] &gt;&gt; 20) * floor(delay) * 24) / 7) * i;
        }
      }
      //delay is how long we wait before spawning another node
      //so song speeds up
      if(delay &gt; 10){
        delay -= 0.5;
      }
    }else if(!win){
      win = true;
    }
  }
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

draw_set_alpha(0.1);
draw_rectangle(0,0,view_wview/4,view_hview,false); 
 
draw_set_alpha(0.2);
draw_rectangle(view_wview/4,0,view_wview/2,view_hview,false); 

draw_set_alpha(0.1); 
draw_rectangle(view_wview/2,0,(view_wview*3)/4,view_hview,false);

draw_set_alpha(0.2);  
draw_rectangle((view_wview*3)/4,0,view_wview,view_hview,false);  

draw_rectangle(0,view_hview - view_hview/20,view_wview,view_hview - view_hview/20 + 16,false); 

if(hp&gt;0 &amp;&amp; (!win || instance_exists(note))){
  draw_set_alpha(0.8);
  draw_set_halign(fa_center);
  draw_set_font(roboto72);
  draw_text(view_wview/2,128,hp);
}else if(win){
  if(!instance_exists(note)){
    draw_set_alpha(0.8);
    draw_set_halign(fa_center);
    draw_set_font(roboto72);
    draw_text(view_wview/2,128,"you win!");
  }
}else{
  draw_set_alpha(0.8);
  draw_set_halign(fa_center);
  draw_set_font(roboto72);
  draw_text(view_wview/2,128,"you lose");
  draw_text(view_wview/2,320,"r-restart");
}

draw_set_colour(c_fuchsia);
draw_set_alpha(0.6);
draw_circle(pinkX,view_hview - view_hview/20,32,false);

draw_set_colour(c_aqua);
draw_circle(blueX,view_hview - view_hview/20,32,false);

draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
